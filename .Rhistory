library(devtools)
library(roxygen2)
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
library(singleRNA)
?singleRNA
??singleRNA
list.files("./data/")
data <- CreateSingleRNA(data.path = c("./data/ATP/", "./data/NTP/"),
sample.name = c("ATP", "NTP"))
testing <- merged(data)
dim(testing)
testing <- CellQc(testing)
dim(testing)
testing@meta.data %>% View()
library(magrittr)
testing@meta.data %>% View()
?CellQc
testing <- CellQc(testing, min.nFeature_RNA = 200,
max.nFeature_RNA = 6000)
dim(testing)
?Running
?Running
Running(testing)
library(Seurat)
?SCTransform
?FindClusters
RunUMAP
?RunUMAP
?SCTransform
?RunPCA
?RunUMAP
?FindNeighbors
#' @rdname Running
#' @method Running Seurat
#'
setMethod("Running", signature = "Seurat",
definition = function(object,
variable.features.n = 3000,
return.only.var.genes = TRUE,
dims = 1:10,
resolution = 0.8,
verbose = TRUE,
...) {
object <- SCTransform(object = object,
variable.features.n = variable.features.n,
return.only.var.genes = return.only.var.genes,
verbose = verbose, ...)
object <- RunPCA(object = object,
verbose = verbose,
...)
object <- RunUMAP(object = object,
dims = dims,
verbose = verbose,
...)
object <- FindNeighbors(object = object,
verbose = verbose,
...)
object <- FindClusters(object = object,
resolution = resolution,
verbose = verbose,
...)
return(object)
})
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
load_all()
document()
library(singleRNA)
data <- CreateSingleRNA(data.path = c("./data/ATP/", "./data/NTP/"),
sample.name = c("ATP", "NTP"))
testing <- merged(data)
dim(testing)
?CreateAssayObject
testing <- merged(data, min.cells = 10)
dim(testing)
testing <- CellQc(testing, min.nFeature_RNA = 200,
max.nFeature_RNA = 6000)
dim(testing)
testing <- Running(object = testing, variable.features.n = 3000,
dims = 1:15)
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
dim(testing)
UMAPPlot(testing)
UMAPPlot(testing, split.by = "sample")
UMAPPlot(testing, split.by = "sample", label = TRUE)
devtools::build(binary = TRUE)
roxygen2::roxygenise("/Users/chentao/Documents/package/singleRNA/")
devtools::build(binary = TRUE)
?devtools
?singlgRNA
??singlgRNA
build_manual()
build_site()
build_vignettes()
?FindAllMarkers
testing <- BuildClusterTree(testing)
PlotClusterTree(testing)
t <- FindAllMarkers(object = testing, node = 26)
t <- FindAllMarkers(object = testing, node = 30)
?FindAllMarkers
t <- FindAllMarkers(object = testing, node = 25)
levels(Idents(testing))
TSNEPlot(testing)
FeaturePlot(testing, feature1 = "CD9")
FeaturePlot(testing, feature1 = "CD9", feature1 = "CD3E")
FeatureScatter(testing, feature1 = "CD9", feature1 = "CD3E")
eatureScatter(object = pbmc_small, feature1 = 'CD9', feature2 = 'CD3E')
FeatureScatter(object = pbmc_small, feature1 = 'CD9', feature2 = 'CD3E')
plot <- DimPlot(object = pbmc_small)
plot
LabelClusters(plot = plot, id = 'ident')
PCAPlot(testing)
PCAPlot(testing, group.by = "sample")
PCAPlot(testing)
PCAPlot(testing, group.by = "sample")
?FindAllMarkers
Tool(object = testing, slot = "BuildClusterTree")
PlotClusterTree(testing)
FindAllMarkers(object = testing, node = 26)
FindAllMarkers(object = testing, node = 1)
FindAllMarkers(object = testing, node = 30)
View(testing@meta.data)
FindAllMarkers(object = testing, node = 29)
View(testing)
testing <- Running(object = testing, resolution = 0.2)
warnings()
View(testing@meta.data)
table(testing@meta.data$SCT_snn_res.0.8, testing@meta.data$SCT_snn_res.0.2)
table(testing@meta.data$SCT_snn_res.0.8, testing@meta.data$SCT_snn_res.0.2) %>% View()
UMAPPlot(object = testing)
UMAPPlot(object = testing, label = TRUE)
UMAPPlot(object = testing, group.by = "sample")
table(testing@meta.data$sample, testing@meta.data$SCT_snn_res.0.2)
UMAPPlot(object = testing, group.by = "sample", label = TRUE)
UMAPPlot(object = testing, group.by = "SCT_snn_res.0.2", label = TRUE)
testing[['SCT']]@scale.data %>% range()
UMAPPlot(object = testing, group.by = "SCT_snn_res.0.8", label = TRUE)
?ScaleData
?SCTransform
testing <- Running(object = testing, resolution = 0.2, vars.to.regress = "sample")
UMAPPlot(testing)
table(testing@meta.data$sample, testing@meta.data$SCT_snn_res.0.2)
testing <- Running(object = testing, resolution = 0.2)
dev.off()
?fisher.test
MP6 <- rbind(
c(1,2,2,1,1,0,1),
c(2,0,0,2,3,0,0),
c(0,1,1,1,2,7,3),
c(1,1,2,0,0,0,1),
c(0,1,1,1,1,0,0))
fisher.test(MP6)
fisher.test(MP6, hybrid=TRUE)
ruguozhendejiuhaoleqinghuadaxue
?aes
?aes_
parent.frame()
environment()
?abort
?eval
'_class'
_class = 12
`_class`` = 12
`_class` = 12
`_class`
?substitute
?grobTree
?grid::editGrob
?par
diff(1:10)
BiocManager::install("xcms")
library(xcms)
library(MassSpecWavelet)
mzdata_path <- system.file("fticr", package = "msdata")
mzdata_files <- list.files(mzdata_path, recursive = TRUE, full.names = TRUE)
## Create a data.frame assigning samples to sample groups, i.e. ham4 and ham5.
grp <- rep("ham4", length(mzdata_files))
grp[grep(basename(mzdata_files), pattern = "^HAM005")] <- "ham5"
pd <- data.frame(filename = basename(mzdata_files), sample_group = grp)
## Load the data.
ham_raw <- readMSData(files = mzdata_files,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk")
## Create a data.frame assigning samples to sample groups, i.e. ham4 and ham5.
grp <- rep("ham4", length(mzdata_files))
grp[grep(basename(mzdata_files), pattern = "^HAM005")] <- "ham5"
pd <- data.frame(filename = basename(mzdata_files), sample_group = grp)
## Load the data.
ham_raw <- readMSData(files = mzdata_files,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk")
mzdata_files
mzdata_path <- system.file("fticr", package = "msdata")
mzdata_files
mzdata_path
library(msdata)
BiocManager::install("msdata")
install.packages("~/Downloads/msdata_0.28.0.tar.gz", repos = NULL, type = "source")
mzdata_path <- system.file("fticr", package = "msdata")
mzdata_path
mzdata_files <- list.files(mzdata_path, recursive = TRUE, full.names = TRUE)
mzdata_files
## Create a data.frame assigning samples to sample groups, i.e. ham4 and ham5.
grp <- rep("ham4", length(mzdata_files))
grp[grep(basename(mzdata_files), pattern = "^HAM005")] <- "ham5"
pd <- data.frame(filename = basename(mzdata_files), sample_group = grp)
## Load the data.
ham_raw <- readMSData(files = mzdata_files,
pdata = new("NAnnotatedDataFrame", pd),
mode = "onDisk")
msw <- MSWParam(scales = c(1, 4, 9), nearbyPeak = TRUE, winSize.noise = 500,
SNR.method = "data.mean", snthresh = 10)
ham_prep <- findChromPeaks(ham_raw, param = msw)ham_prep <- findChromPeaks(ham_raw, param = msw)
ham_prep <- findChromPeaks(ham_raw, param = msw)
class(ham_raw)
.libPaths()
rm(list = ls())
installed.packages()
?plot
plot(mpg~ disp, data = mtcars)
?plot
?formula
as.formula("mpg ~ disp")
t <- as.formula("mpg ~ disp")
plot(t)
plot(t, data = mtcars)
methods(plot)
Formula:::plot
stats:::plot
stats::plot.ecdf
plot.default
edit(plot.default)
xiwangxiaoxu
print("hello")
library(datasets)
data(trees, package = "datasets")
trees
names <- c("Ya, Junjie, Jin, Yilv, Liangdong, Junjie, Jin, Dongqing, Ya, Xin, Jun, Xiaoying,
Pengfei, Tao, Sailing, Tong, Jiali, Nan, Zhanhe, Xin, Hailin,
Dongqing, Yihan")
sstrsplit(names, split = ",")
strsplit(names, split = ",")
names <- c("Ya, Junjie, Jin, Yilv, Liangdong, Junjie, Jin, Dongqing, Ya, Xin, Jun, Xiaoying, Pengfei, Tao, Sailing, Tong, Jiali, Nan, Zhanhe, Xin, Hailin, Dongqing, Yihan")
strsplit(names, split = ",")
t <- strsplit(names, split = ",")
length(unique(t[[1]]))
unique(t[[1]])
names <- c("Ya,Junjie,Jin,Yilv,Liangdong,Junjie,Jin,Dongqing,Ya,Xin,Jun,Xiaoying,Pengfei,Tao,Sailing,Tong,Jiali,Nan,Zhanhe,Xin,Hailin,Dongqing,Yihan")
t <- strsplit(names, split = ",")
table(t[[1]])
library(Gmisc)
?CheckDots
CheckDots
installed.packages()
requireNamespace("DESeq2")
t <- requireNamespace("DESeq")
t
logical(length = 1)
logical(length = 2)
?requireNamespace
?vapply
vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 1L))
t <- vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 1L))
t
t <- vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 2L))
t
t <- vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 0L))
t
t <- vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 1L))
t
t <- vapply("DESeq",
FUN = requireNamespace)
t
t <- vapply("DESeq",
FUN = requireNamespace)
t
t <- vapply("DESeq",
FUN = requireNamespace,
FUN.VALUE = logical(length = 1L))
!t
invisible(t)
?invisible
f1 <- function(x) x
f2 <- function(x) invisible(x)
f1(1)
f2(1)
f1(1) ==
1
?data.frame
?lapply
lapply(mtcars, sum)
dim(mtcars)
lapply(mtcars, sum, Names = letters[1:11])
lapply(mtcars, sum)
?get
get("%o%")
x = 1
get("x")
gaussian()
edit(gaussian)
edit(gaussian)
install.packages("stringi")
library(stringi)
library(stringr)
y <- function(x) rnorm(x, mean = 0, sd = 1)
mean(y)
y
y(10)
mean(y(10))
mean(y(100))
mean(y(1000))
mean(y(10000))
mean(y(100000))
mean(y(1000000))
sd(1:3)
sd(1:4)
sd(1:2)
sqrt(0.5)
?sd
q()
plot(1:10, type = "o")
plot(1:10)
plot(1:10, type = l)
plot(1:10, type = "l")
plot(1:10)
plot(1:10, type = "h")
points(1:10)
points(1:10, pch = 16)
points(1:10, pch = 16, col = "red")
dev.off()
plot(1:10, main = expression("y[t]"))
?expression
expression(u, 2, u + 0:9)
plot(1:10, main = expression(u, 2, u + 0:9))
plot(1:10, main = expression("1+1"))
dev.off())
dev.off()
library(readr)
?readr
?write_rds
?tibble::tibble
a <- 1:5
tibble(a, b = a * 2, c = 1)
library(tibble)
tibble(a, b = a * 2, c = 1)
tibble(x = 1, x = 2, .name_repair = "unique")
edit(tibble)
tibble(x = 1, x = 2, .name_repair = "check_unique")
tibble(x = 1, x = 2, .name_repair = "unique")
tibble(x = 1, x = 2, .name_repair = "minimal")
edit(tibble)
download.packages("tibble", destdir = "/Users/chentao/Desktop/package/")
getRversion()
match()
?match
?invisible
?enquote
testing <- function(...) {
args <- match.call()[-1]
return(args)
}
testing(name = 1, age = 24)
testing <- function(...) {
args <- match.call()
return(args)
}
testing(name = 1, age = 24)
testing <- function(...) {
args <- call()
return(args)
}
testing(name = 1, age = 24)
edit(lm)
edit(lm.fit)
chkDots
edit(chkDots)
testing <- function(...) {
args <- sys.call()
return(args)
}
testing(name = 1, age = 24)
?call
edit(chkDots)
?sQuote
testing <- function(...) {
args <- match.call()
return(args)
}
testing(name = "yangjuan", age = 26)
testing <- function(...) {
args <- as.list(match.call())
return(args)
}
testing(name = "yangjuan", age = 26)
?match.call
edit(match.call)
?dplyr::sample_frac
slice_sample(mtcars, n = 10)
library(dplyr)
slice_sample(mtcars,n = 10)
head(mtcars)
slice_sample(mtcars,n = 10)
slice_sample(mtcars,n = 100)
?dplyr
?tibble
?tibble
library(igraph)
?large angles, and are thus suitable for finite element analysis.''
library(igraph)
all_simple_paths
?all_simple_paths
